// import * as Maybe from "data.maybe";

import { MicroserviceEndpoint } from "../../microservices-framework/web/services/microservice-endpoint";

// import * as Auth from "../../common/auth";
// import * as Datastore from "../../common/datastore";

// /////////////////////////////////////////////////////////////
// SWAGGER: start                                             //
// KEEP THIS UP-TO-DATE WHEN MAKING ANY CHANGES TO THE METHOD //
// /////////////////////////////////////////////////////////////

// OPERATION
const operation = {
    get: {
        consumes: ["application/json"],
        description: "Returns an user matching the passed ID. If the user is not present, an empty object will be " +
        "returned. It means that even if the user exists in firebase, it doesn't have any extra details that we want" +
        " to save such as special roles, bought images etc...",
        parameters: [
            {
                description: "The ID of the user to be returned",
                in: "path",
                name: "id",
                required: true,
                type: "string",
            }, {
                description: "The idtoken as generated by firebase. Only the current owner and admin can search from " +
                             "himself.",
                in: "header",
                name: "idtoken",
                required: true,
                type: "string",
            },
        ],
        produces: ["application/json; charset=utf-8"],
        responses: {
            200: {
                description: "A welcome message.",
                schema: {
                    $ref: "#/definitions/APIMessage",
                },
            },
            default: {
                description: "unexpected error",
                schema: {
                  $ref: "#/definitions/Error",
                },
            },
        },
        tags: [
            "users",
        ],
    },
};

// ///////////////
// SWAGGER: end //
// ///////////////

// ////////////////
// SENECA: start //
// ////////////////

// const service = (broadcast: Function, params: any): any => {
//     const id: string = Maybe.fromNullable(params.id).getOrElse("");
//     const idtoken: string = Maybe.fromNullable(params.idtoken).getOrElse("");
//
//     return Auth.isUser(idtoken, id)
//         .then( () => Datastore.getUserById(id));
// };

// //////////////
// SENECA: end //
// //////////////

export const getById = new MicroserviceEndpoint("loadUser")
    .addSwaggerOperation(operation);
    // .addService(service);
